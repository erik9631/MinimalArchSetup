#!/bin/bash
ask_for_confirmation(){
  local confirmation
  read -r -p "$1 (y/N) " confirmation

  case $confirmation in
    [yY][eE][sS]|[yY])
        return 0
        ;;
    *)
        echo "Operation cancelled by user." >&2
        return 1
        ;;
  esac
}
export -f ask_for_confirmation

function is_time_synced(){
  local sync_status
  # Parse synchronization status and return error if not synchronized
  sync_status=$(timedatectl show --property=NTPSynchronized --value)
  if [ "$sync_status" != "yes" ]; then
      echo "Error: Time synchronization failed, NTPSynchronized is set to $sync_status" >&2
      return 1
  fi
}
export -f is_time_synced

# Function for checking if the user is root
function check_root_user() {
  if [ "$(id -u)" != "0" ]; then
    echo "Error: This script must be run as root"
    exit 1
  fi
}
export -f check_root_user

function get_current_stage_from_var() {
    local stage
    stage=$(ls /var/install | grep -Eo 'stage[0-9]' | grep -Eo '[0-9]')

    if [[ -n $stage ]]; then
        echo "$stage"
    else
        >&2 echo "No stage found."
        return 1  # Return an error code if no stage is found.
    fi
}
export -f get_current_stage_from_var

function git_get_files_from_url(){
  local url=$1
  local git_dir
  git_dir=$(mktemp -d git-XXXXXXXXXX)
  local archive="$git_dir/archive.tar.gz"
  if ! wget -O "$archive" "$url"; then
    echo "Error: Failed to download files from $url" >&2
    return 1
  fi
  if ! tar xvzf "$archive" -C "$git_dir" --strip-components=1; then
    echo "Error: Failed to extract files from $archive" >&2
    return 2
  fi
  echo "$git_dir"
}
export -f get_current_stage_from_var

function install_model_packages(){
  local model_name
  local model_packages
  model_name=$(cat /sys/devices/virtual/dmi/id/product_name)
  readarray -t model_packages <<< "$(export_package_group "$model_name" "pacman")"

  if ! install_pacman_packages "${model_packages[@]}"; then
    echo "Failed to install model specific packages"
    sleep 5
  fi
}
export -f install_model_packages
